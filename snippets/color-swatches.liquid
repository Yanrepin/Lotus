{% comment %}
  Renders a list of product's price (regular, sale)

  Accepts:
  - product: {Object} Product Liquid object (optional)

  Usage:
  {% render 'price', product: product %}
{% endcomment %}

{%- liquid
  assign color_names = 'color,colour,צבע,field color,color field,product color,farbe,colors,colours,Kleur,Colore,cor,couleur,field-color,product.color,colour group,color option,Szín,Χρώμα,Barva,สี,Kolor,Renk,색상,色,顏色,颜色,اللون' | split: ','
  if use_variant
    assign target = product.selected_or_first_available_variant
  elsif placeholder
    assign target = null
  else
    assign target = product
  endif
-%}
{% comment %} CSS files {% endcomment %}
<style>
  :root {
    {% comment %} --steps_text_alignment: {{ section.settings.steps_text_alignment }};
    --steps_text_color: {{ section.settings.color_scheme.settings.text }};
    --steps_background_color: {{ section.settings.color_scheme.settings.background }};
    --steps_background_gradient_color: {{ section.settings.color_scheme.settings.background_gradient }};
    --steps_button_color: {{ section.settings.color_scheme.settings.button }};
    --steps_button_label_color: {{ section.settings.color_scheme.settings.button_label }};
    --steps_shadow_color: {{ section.settings.color_scheme.settings.shadow }}; {% endcomment %}

  }
</style>
{{ 'color-swatches.css' | asset_url | stylesheet_tag }}

{% comment %} JS {% endcomment %}
<script>
  function handleSwatchClick(event) {
    const swatch = event.currentTarget;
    const swatchWrapper = swatch.closest('.colorsWrapper');

    //handling data
    const color = swatch.dataset.color;
    const product = JSON.parse(swatch.dataset.product);
    const option = swatch.dataset.option;
    const relatedVariations = product?.variants.filter((variation) => {
      if (variation.option1 == color || variation.option2 == color || variation.option3 == color) return true;
      return false;
    });

    //find variant image if exists
    var image = '';
    if (relatedVariations) {
      const variationWithImage = relatedVariations.find(
        (variation) => variation.featured_image && variation.featured_image.src
      );
      if (variationWithImage) {
        image = variationWithImage.featured_image.src;
      }
    }

    //handle selected calss
    swatchWrapper.querySelectorAll('.selected').forEach((selected) => {
      selected.classList.remove('selected');
    });
    swatch.classList.add('selected');

    console.log('Product:', product);
    console.log('relatedVariations:', relatedVariations);
    console.log('image:', image);
  }

  function handleMoreSwatchesClick(event) {
    // event for + sign to open or close the overflow swatches
    const plusOrMinus = event.target;
    const swatchesWrapperElement = plusOrMinus.closest('.colorsWrapper');
    if (swatchesWrapperElement) {
      if (plusOrMinus.innerHTML.indexOf('+') > -1) {
        plusOrMinus.innerHTML = plusOrMinus.innerHTML.replace('+', '-');
        swatchesWrapperElement.querySelectorAll('.overMaxSwatchHidden').forEach((overflowSwatch) => {
          overflowSwatch.classList.add('overMaxSwatchVisible');
          overflowSwatch.classList.remove('overMaxSwatchHidden');
        });
      } else {
        plusOrMinus.innerHTML = plusOrMinus.innerHTML.replace('-', '+');
        swatchesWrapperElement.querySelectorAll('.overMaxSwatchVisible').forEach((overflowSwatch) => {
          overflowSwatch.classList.add('overMaxSwatchHidden');
          overflowSwatch.classList.remove('overMaxSwatchVisible');
        });
      }
    }
  }
</script>

{% comment %} section content {% endcomment %}
{% assign color_config = settings.colorConfig | downcase | split: ',' %}
{% assign max_swatches = settings.maxSwatches | default: 5 %}

{%- for option in product.options_with_values -%}
  {% assign option_name = option.name | downcase %}

  {% if color_names contains option_name %}
    <div class="colorsWrapper">
      {% assign overflow_count = option.values.size | minus: max_swatches %}

      {%- for color_option in option.values -%}
        {% assign index = forloop.index0 %}
        {% assign max_index = max_swatches | minus: 1 %}

        {%- assign bg_color = color_option | downcase -%}
        {%- assign hex_code = '' -%}
        {%- for pair in color_config -%}
          {%- assign parts = pair | split: ':' -%}
          {%- if parts[0] == bg_color -%}
            {%- assign hex_code = parts[1] -%}
          {%- endif -%}
        {%- endfor -%}

        <div
          class="
            colorSwatch
            {% if settings.swatchesOptions == 'color' %}circle{% endif %}
            {% if index > max_index %}overMaxSwatchHidden{% endif %}
          "
          data-color="{{ color_option | escape }}"
          data-product="{{ product | json | escape }}"
          data-option="{{ option | escape }}"
          aria-label="{{ color_option }}"
          style="{% if settings.swatchesOptions == 'color' %}background-color:{{ hex_code | default: bg_color }};{% endif %}"
          onclick="handleSwatchClick(event)"
        ></div>
      {%- endfor -%}

      {% if overflow_count %}
        <div class="plusSwatches" onclick="handleMoreSwatchesClick(event)">+ {{ overflow_count }}</div>
      {% endif %}
    </div>
  {% endif %}
{%- endfor -%}
