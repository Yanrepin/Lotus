{% comment %}
  Renders swatches,
  JS rendered at theme.liquid file only at case the switch is on,
  rendering it there is in order to render the script only once and to work also for widgets

  Accepts:
  - product: {Object} Product Liquid object (optional)

  Usage:
  {% render 'color-swatches', product: product %}
{% endcomment %}

{%- liquid
  assign color_names = 'color,colour,צבע,field color,color field,product color,farbe,colors,colours,Kleur,Colore,cor,couleur,field-color,product.color,colour group,color option,Szín,Χρώμα,Barva,สี,Kolor,Renk,색상,色,顏色,颜色,اللون' | split: ','
  if use_variant
    assign target = product.selected_or_first_available_variant
  elsif placeholder
    assign target = null
  else
    assign target = product
  endif
-%}
{% comment %} CSS files {% endcomment %}
<style>
  :root {
    --swatches_size: {{ settings.swatchesSize }}px;
     {% comment %}
    --steps_text_color: {{ section.settings.color_scheme.settings.text }};
    --steps_background_color: {{ section.settings.color_scheme.settings.background }};
    --steps_background_gradient_color: {{ section.settings.color_scheme.settings.background_gradient }};
    --steps_button_color: {{ section.settings.color_scheme.settings.button }};
    --steps_button_label_color: {{ section.settings.color_scheme.settings.button_label }};
    --steps_shadow_color: {{ section.settings.color_scheme.settings.shadow }}; {% endcomment %}

  }
</style>
{{ 'color-swatches.css' | asset_url | stylesheet_tag }}

{% comment %} section content {% endcomment %}
{% assign color_config = settings.colorConfig | downcase | split: ',' %}
{% assign max_swatches = settings.maxSwatches | default: 5 %}
{% assign swatch_size = settings.swatchesSize | times: 2 %}
{% assign swatch_size_string = swatch_size | append: 'x' %}
{% assign color_variant_name = settings.colorVariantName | downcase %}
{% assign option = null %}

{%- for option_with_values in product.options_with_values -%}
  {% assign option_name = option_with_values.name | downcase %}
  {% if option_name == color_variant_name %}
    {% assign option = option_with_values %}
    {% break %}
  {% endif %}
{%- endfor -%}

{% if option %}
  <div class="colorsWrapper" data-product="{{ product | json | escape }}">
    {% assign overflow_count = option.values.size | minus: max_swatches %}

    {%- for color_option in option.values -%}
      {% assign index = forloop.index0 %}
      {% assign max_index = max_swatches | minus: 1 %}

      {% comment %} searching in the custom config {% endcomment %}
      {%- assign bg_color = color_option | downcase -%}
      {%- assign hex_code = '' -%}
      {% if settings.swatchesOptions == 'color' %}
        {%- for pair in color_config -%}
          {%- assign parts = pair | split: ':' -%}
          {%- if parts[0] == bg_color -%}
            {%- assign hex_code = parts[1] -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endif -%}

      {% comment %} exicuted first variant image {% endcomment %}
      {% assign related_variations = '' %}
      {% assign image = '' %}
      {% assign second_image = '' %}
      {% if settings.swatchesOptions == 'variantFirstImage' %}
        {% assign related_variations = product.variants | where: 'option1', bg_color %}
        {% assign more_variants = product.variants | where: 'option2', bg_color %}
        {% assign related_variations = related_variations | concat: more_variants %}
        {% assign more_variants = product.variants | where: 'option3', bg_color %}
        {% assign related_variations = related_variations | concat: more_variants %}
        {% for variant in related_variations %}
          {% if variant.featured_image and variant.featured_image.src %}
            {% if image == '' %}
              {% assign image = variant.featured_image.src %}
            {% else %}
              {% assign second_image = variant.featured_image.src %}
              {% break %}
            {% endif %}
          {% endif %}
        {% endfor %}
      {% endif %}

      {% comment %} swatch HTML element {% endcomment %}
      <div
        class="
          colorSwatch
          {% if settings.swatchesShape == 'circle' %}circle{% else %}square{% endif %}
          {% if index > max_index %}overMaxSwatchHidden{% endif %}
        "
        data-color="{{ color_option | escape }}"
        data-option="{{ option | escape }}"
        {% if settings.swatchesOptions == 'variantFirstImage' %}
          data-variantFirstImage="{{ image | escape  }}"
          data-variantSecondImage="{{ second_image | escape  }}"
        {% endif %}
        aria-label="{{ color_option }}"
        style="
          {% if settings.swatchesOptions == 'color' %}background-color:{{ hex_code | default: bg_color }};{% endif %}
          {% if settings.swatchesOptions == 'variantFirstImage' %}background-image: url('{{ image | img_url: swatch_size_string }}'); background-size: cover; background-position: center;{% endif %}
        "
        onclick="handleSwatchClick(event)"
      ></div>
    {%- endfor -%}

    {% if overflow_count > 0 %}
      <div class="plusSwatches" onclick="handleMoreSwatchesClick(event)">+ {{ overflow_count }}</div>
    {% endif %}
  </div>
{% endif %}
